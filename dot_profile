# Normally I'd want to set env vars in .zprofile and/or .zshenv. Since some of
# these app-setups also involve defining shell functions, the work of this
# script would generally need to be done in .zshenv.

# BUT in some (most?) GNOME systems using X11, vars set in .zshenv/.zprofile
# are not available to things launched outside of a shell (including the
# launchers themselves like the dock or quicklaunch or file manager). That can
# be bad in general, and specifically bad if that causes PATH modifications
# to be skipped.

# So I'll just set stuff here in .profile, since at least on the particular
# GNOME systems I've dealt with, the login manager explicitly sources
# .profile to help set the environment for those launchers etc.

# I'll source .profile from .zshenv to make sure these vars get set on
# all systems, and to make sure that any defined shell functions are available.

# Also: I only want to process this file if it's being sourced from the
# login manager or from .zshenv, to avoid double sourcing (although that
# wouldn't be the end of the world).
#
# This rule should handle that: if we are in a login shell, and this file is
# not being sourced from .zshenv, then bail out.
#
# What should happen is:
# - A login shell may or may not try to source .profile directly. In that
#   case we'll bail out of sourcing this file. But then the login shell setup
#   will continue on to source .zshenv which will source this file.
# - A non-login shell will source .zshenv which will source this file.
# - In GNOME+X11, the login manager sources .profile directly. It is not seen
#   as a "login shell", so this file will indeed get sourced (not bail out).
# - In other scenarios (I think including GNOME+Wayland and KDE), the login
#   manager does not source .profile directly; instead it actually runs a
#   login shell to get all the normal config sourcing done. That will then
#   behave as a "real" login shell would.

# The GNOME+X11 login manager could use non-zsh (e.g. sh) to source this script
# so we will test for login shell the old-fashioned way.
if echo $0 | grep -e ^\- > /dev/null 2>&1
then
  if [[ "x$SOURCING_PROFILE_FROM_ZSHENV" != "xtrue" ]]
  then
    return
  fi
fi

# Because login manager may execute this using some other shell, don't use
# zsh-isms below! Hopefully the scripts sourced for app setup will also
# behave... if not, cross that bridge when we come to it.

# Always make PATH include my private bin dir.
PATH="$HOME/.local/bin:$PATH"

# Discover installed stuff && set related vars.

# Note that any debug logging for missing things will be done in .zshrc, to
# use the autoloaded _dbg_init_log function and make sure it only happens in
# interactive shells.

# cargo/rust path
if [[ -r "$HOME/.cargo/env" ]]
then
  source "$HOME/.cargo/env"
fi

# homebrew vars
has_homebrew=false
if [[ -x /opt/homebrew/bin/brew ]]
then
  has_homebrew=true
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# golang vars
if which go > /dev/null 2>&1
then
  export GOPATH="$HOME/go"
  PATH="$GOPATH/bin:$PATH"
  export GOROOT=$(go env GOROOT)
else
  if [[ -x /usr/local/go/bin/go ]]
  then
    export GOPATH="$HOME/go"
    PATH="$GOPATH/bin:/usr/local/go/bin:$PATH"
    export GOROOT=$(go env GOROOT)
  fi
fi

# asdf vars
if [[ -r "$HOME/.asdf/asdf.sh" ]]
then
  source "$HOME/.asdf/asdf.sh"
else
  if [[ "$has_homebrew" == "true" ]]
  then
    asdf_sh="$(brew --prefix asdf)/libexec/asdf.sh"
    [[ -r "$asdf_sh" ]] && source "$asdf_sh"
  fi
fi

# nvm functions
if [[ -r "$HOME/.nvm/nvm.sh" ]]
then
  export NVM_DIR="$HOME/.nvm"
  source "$NVM_DIR/nvm.sh"
  [[ -r "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"  # even for zsh!
fi

# Finally, anything else hyper-specific to this system.
[[ -r ~/.profile_local ]] && source ~/.profile_local

export PATH
