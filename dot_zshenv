# Annoyingly, on macOS if this is in a login shell then later sourcing of
# /etc/zprofile will screw up the ordering of PATH elements (by using
# path_helper). Any solution for this needs to make sure that the contents of
# this file get executed for a shell regardless of whether it is interactive
# or login. Also the execution needs to be in the shell itself, not a parent
# shell... some of the sourced app setups also create shell functions, which
# are not inherited to subshells.

# So: if this is a login shell, and therefore /etc/zprofile and .zprofile
# are going to get sourced, then don't process this file yet. Wait and source
# it from .zprofile, after /etc/zprofile has done its macOS path shenanigans.
# This fixes the macOS issue and is also harmless on other systems.
if [[ -o login ]]
then
  if [[ "x$SOURCING_ZSHENV_FROM_ZPROFILE" != "xtrue" ]]
  then
    return
  fi
fi

# Irritating that we have to subvert the normal usage patterns of the zsh
# startup config files of course (and we're going to do it again below with
# the .profile use). Anyway, onward!

# Don't allow dups in PATH.
typeset -U path PATH

# Vars will generally be set in .profile; see comments there for explanation.
# We'll source that file from here. Set a var to indicate that's what is
# going on.
SOURCING_PROFILE_FROM_ZSHENV=true
[[ -r ~/.profile ]] && source ~/.profile

# fpath modifications are the exception. The .profile may be sourced directly
# by the login manager, not using zsh, so we'll still handle fpath
# modifications in this file.

# fpath directory is expected to contain the _dbg_init_log function def used
# in dotfiles... also used for other stuff e.g. poetry.
fpath+=$HOME/.zfunc

# Add Docker Desktop functions dir if present.
if [ -d "$HOME/.docker/completions" ]
then
  fpath+=$HOME/.docker/completions
fi

export fpath

# If this system needs something else and needs it specifically in zshenv,
# pick that up here.
[[ -r ~/.zshenv_local ]] && source ~/.zshenv_local
